version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:17.5-alpine
    container_name: listopia_postgres
    environment:
      POSTGRES_DB: listopia_development
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - listopia_network

  # PostgreSQL Test Database (separate for testing)
  postgres_test:
    image: postgres:17.5-alpine
    container_name: listopia_postgres_test
    environment:
      POSTGRES_DB: listopia_test
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5433:5432"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - listopia_network

  # Optional: MailHog for email testing (commented out as letter_opener is used)
  # Uncomment if you prefer MailHog over letter_opener for email testing
  # mailhog:
  #   image: mailhog/mailhog:latest
  #   container_name: listopia_mailhog
  #   ports:
  #     - "1025:1025"  # SMTP server
  #     - "8025:8025"  # Web UI
  #   networks:
  #     - listopia_network

  # Optional: Redis for high-performance caching and job queuing
  # Uncomment if you want to use Redis instead of PostgreSQL for caching/jobs
  # redis:
  #   image: redis:7.2-alpine
  #   container_name: listopia_redis
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis_data:/data
  #   command: redis-server --appendonly yes
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   networks:
  #     - listopia_network

  # Optional: pgAdmin for database management
  # Uncomment if you want a web-based PostgreSQL admin interface
  # pgadmin:
  #   image: dpage/pgadmin4:latest
  #   container_name: listopia_pgadmin
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: admin@listopia.local
  #     PGADMIN_DEFAULT_PASSWORD: admin
  #     PGADMIN_CONFIG_SERVER_MODE: 'False'
  #   ports:
  #     - "5050:80"
  #   volumes:
  #     - pgadmin_data:/var/lib/pgadmin
  #   depends_on:
  #     - postgres
  #   networks:
  #     - listopia_network

volumes:
  postgres_data:
    driver: local
  postgres_test_data:
    driver: local
  # redis_data:
  #   driver: local
  # pgadmin_data:
  #   driver: local

networks:
  listopia_network:
    driver: bridge